# 项目开发规范文档

<project_overview>
## 一、项目概述
**技术栈**：Vue3 + Vite + TypeScript  
**开发模式**：组件化、模块化开发  
**目标**：构建高效、可维护的前端项目
</project_overview>

<project_initialization>
## 二、项目启动流程

### 1. 项目初始化
- 使用 GitHub 仓库模板 `git@github.com:jilongsong/vue3-template.git` 创建项目
- **注意**：如果当前文件夹已有文件，创建新子目录来存放项目
- **Windows PowerShell 命令注意事项**：使用分号而非 `&&`
- 安装项目依赖，启动开发服务器
- 确认项目正常运行
- 将根目录下的 `images` 复制到 `assets/images` 目录
</project_initialization>

<requirements_confirmation>
### 2. 需求确认
- 用户提供需求（文字描述或图片标注）
- **需求分析**：分析需求可行性并制定开发计划
- 与用户确认开发方案
  - **是否需要路由配置**：如果是，建立路由并在 `main.ts` 和 `app.vue` 中正确注册
  - 如果不是，直接开发，将 `app.vue` 当作页面文件
</requirements_confirmation>

</project_initialization>

<development_guidelines>
## 三、开发规范

### 1. 代码规范
- **遵循 TypeScript 标准规范**  
- 代码可读性优先，命名规范：
  - **组件命名**：PascalCase
  - **变量/函数命名**：camelCase
- 采用 **模块化开发**，避免冗余代码
- 复杂逻辑应独立封装为函数或模块
  - **【最佳实践】**：将复杂功能拆解为小的、独立的模块

### 2. 页面开发规范
- **响应式布局**：页面适配各种设备，确保在不同分辨率下正常显示
- **组件化开发**：功能拆分成小的组件，每个组件有单一职责
- **样式优化**：简洁、优雅、高级，注重细节设计
- **图片样式**: **适应容器大小**
- **【重点】**：尽量避免硬编码样式，使用 CSS Variables 或 SCSS 来增强可维护性
- **性能优先**：减少无效重绘，避免不必要的 DOM 操作

### 3. 页面开发注意事项
- **【关键】** 配置路由时，务必在 `main.ts` 和 `app.vue` 中检查注册
- **【重要】** 图片、图表、列表等大元素避免溢出，确保合理间距和自适应
- **【标准】** 页面符合 Vue3 的标准
- **【优先】** 采用 **单屏显示**，避免出现滚动条
- **【适配】**：确保所有页面和组件在不同设备上的适配性和用户体验

### 4. 依赖库
- **图标库**：@element-plus/icons-vue
- **UI 库**：ElementUI-plus
</development_guidelines>

<development_process>
## 四、开发流程

### 1. 需求阶段
- 用户提供需求（文字描述或图片标注）
- 进行需求分析和功能拆解
- 与用户确认开发方案
  - **【关键】** 确认开发方案时，确保已明确开发的每一项功能需求

### 2. 开发阶段
- 遵循 **SOLID 设计原则**
- 代码中添加详细注释，方便后期维护
- **资源管理**：图片资源存放在 `assets/images` 目录下
- 路由配置和页面布局需保证合理性，避免出现潜在错误
- **【重中之重】**：生成 `vue` 文件时一定要注意【避免标签转义】，每个文件生成结束后【进行自检】

### 3. 问题处理
- **分析代码逻辑**，定位问题根源
- 提出解决方案并验证效果
  - **【建议】**：每次问题解决后及时更新文档，确保团队成员能够跟进最新解决方案
</development_process>

<project_structure>
## 五、项目结构规范

### 1. 目录结构
```bash
src/
  ├── assets/          # 静态资源
  ├── components/      # 公共组件
  ├── views/           # 页面组件
  ├── router/          # 路由配置
  ├── store/           # 状态管理
  ├── utils/           # 工具函数
  ├── types/           # 类型定义
  ├── styles/          # 全局样式
